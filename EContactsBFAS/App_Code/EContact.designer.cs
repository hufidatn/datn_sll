#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;



[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="ECONTACTS")]
public partial class EContactDataContext : System.Data.Linq.DataContext
{
	
	private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
	
  #region Extensibility Method Definitions
  partial void OnCreated();
  partial void InsertClassDepartment(ClassDepartment instance);
  partial void UpdateClassDepartment(ClassDepartment instance);
  partial void DeleteClassDepartment(ClassDepartment instance);
  partial void InsertViolation(Violation instance);
  partial void UpdateViolation(Violation instance);
  partial void DeleteViolation(Violation instance);
  partial void InsertClass(Class instance);
  partial void UpdateClass(Class instance);
  partial void DeleteClass(Class instance);
  partial void InsertClassStudent(ClassStudent instance);
  partial void UpdateClassStudent(ClassStudent instance);
  partial void DeleteClassStudent(ClassStudent instance);
  partial void InsertConduct(Conduct instance);
  partial void UpdateConduct(Conduct instance);
  partial void DeleteConduct(Conduct instance);
  partial void InsertDepartment(Department instance);
  partial void UpdateDepartment(Department instance);
  partial void DeleteDepartment(Department instance);
  partial void InsertDepartmentSubject(DepartmentSubject instance);
  partial void UpdateDepartmentSubject(DepartmentSubject instance);
  partial void DeleteDepartmentSubject(DepartmentSubject instance);
  partial void InsertGradeSchool(GradeSchool instance);
  partial void UpdateGradeSchool(GradeSchool instance);
  partial void DeleteGradeSchool(GradeSchool instance);
  partial void InsertSanction(Sanction instance);
  partial void UpdateSanction(Sanction instance);
  partial void DeleteSanction(Sanction instance);
  partial void InsertSchoolYear(SchoolYear instance);
  partial void UpdateSchoolYear(SchoolYear instance);
  partial void DeleteSchoolYear(SchoolYear instance);
  partial void InsertSemester(Semester instance);
  partial void UpdateSemester(Semester instance);
  partial void DeleteSemester(Semester instance);
  partial void InsertStudent(Student instance);
  partial void UpdateStudent(Student instance);
  partial void DeleteStudent(Student instance);
  partial void InsertSubject(Subject instance);
  partial void UpdateSubject(Subject instance);
  partial void DeleteSubject(Subject instance);
  partial void InsertTeacherSubject(TeacherSubject instance);
  partial void UpdateTeacherSubject(TeacherSubject instance);
  partial void DeleteTeacherSubject(TeacherSubject instance);
  partial void InsertTypeScore(TypeScore instance);
  partial void UpdateTypeScore(TypeScore instance);
  partial void DeleteTypeScore(TypeScore instance);
  partial void InsertUserGroup(UserGroup instance);
  partial void UpdateUserGroup(UserGroup instance);
  partial void DeleteUserGroup(UserGroup instance);
  partial void InsertUsers_UserGroup(Users_UserGroup instance);
  partial void UpdateUsers_UserGroup(Users_UserGroup instance);
  partial void DeleteUsers_UserGroup(Users_UserGroup instance);
  partial void InsertScore(Score instance);
  partial void UpdateScore(Score instance);
  partial void DeleteScore(Score instance);
  partial void InsertTeacher(Teacher instance);
  partial void UpdateTeacher(Teacher instance);
  partial void DeleteTeacher(Teacher instance);
  #endregion
	
	public EContactDataContext() : 
			base(global::System.Configuration.ConfigurationManager.ConnectionStrings["ECONTACTSConnectionString"].ConnectionString, mappingSource)
	{
		OnCreated();
	}
	
	public EContactDataContext(string connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EContactDataContext(System.Data.IDbConnection connection) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EContactDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public EContactDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
			base(connection, mappingSource)
	{
		OnCreated();
	}
	
	public System.Data.Linq.Table<ClassDepartment> ClassDepartments
	{
		get
		{
			return this.GetTable<ClassDepartment>();
		}
	}
	
	public System.Data.Linq.Table<Violation> Violations
	{
		get
		{
			return this.GetTable<Violation>();
		}
	}
	
	public System.Data.Linq.Table<Class> Classes
	{
		get
		{
			return this.GetTable<Class>();
		}
	}
	
	public System.Data.Linq.Table<ClassStudent> ClassStudents
	{
		get
		{
			return this.GetTable<ClassStudent>();
		}
	}
	
	public System.Data.Linq.Table<Conduct> Conducts
	{
		get
		{
			return this.GetTable<Conduct>();
		}
	}
	
	public System.Data.Linq.Table<Department> Departments
	{
		get
		{
			return this.GetTable<Department>();
		}
	}
	
	public System.Data.Linq.Table<DepartmentSubject> DepartmentSubjects
	{
		get
		{
			return this.GetTable<DepartmentSubject>();
		}
	}
	
	public System.Data.Linq.Table<GradeSchool> GradeSchools
	{
		get
		{
			return this.GetTable<GradeSchool>();
		}
	}
	
	public System.Data.Linq.Table<Sanction> Sanctions
	{
		get
		{
			return this.GetTable<Sanction>();
		}
	}
	
	public System.Data.Linq.Table<SchoolYear> SchoolYears
	{
		get
		{
			return this.GetTable<SchoolYear>();
		}
	}
	
	public System.Data.Linq.Table<Semester> Semesters
	{
		get
		{
			return this.GetTable<Semester>();
		}
	}
	
	public System.Data.Linq.Table<Student> Students
	{
		get
		{
			return this.GetTable<Student>();
		}
	}
	
	public System.Data.Linq.Table<Subject> Subjects
	{
		get
		{
			return this.GetTable<Subject>();
		}
	}
	
	public System.Data.Linq.Table<TeacherSubject> TeacherSubjects
	{
		get
		{
			return this.GetTable<TeacherSubject>();
		}
	}
	
	public System.Data.Linq.Table<TypeScore> TypeScores
	{
		get
		{
			return this.GetTable<TypeScore>();
		}
	}
	
	public System.Data.Linq.Table<UserGroup> UserGroups
	{
		get
		{
			return this.GetTable<UserGroup>();
		}
	}
	
	public System.Data.Linq.Table<Users_UserGroup> Users_UserGroups
	{
		get
		{
			return this.GetTable<Users_UserGroup>();
		}
	}
	
	public System.Data.Linq.Table<Score> Scores
	{
		get
		{
			return this.GetTable<Score>();
		}
	}
	
	public System.Data.Linq.Table<Teacher> Teachers
	{
		get
		{
			return this.GetTable<Teacher>();
		}
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoginSystem")]
	public int LoginSystem([global::System.Data.Linq.Mapping.ParameterAttribute(Name="TenDN", DbType="VarChar(50)")] string tenDN, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MatKhau", DbType="VarChar(50)")] string matKhau)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), tenDN, matKhau);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.InsertTeacherSujects")]
	public int InsertTeacherSujects([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaGV", DbType="NChar(50)")] string maGV, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> mon, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> ky, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Nam", DbType="Int")] System.Nullable<int> nam, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> lop)
	{
		IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maGV, mon, ky, nam, lop);
		return ((int)(result.ReturnValue));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.BangGVBM", IsComposable=true)]
	public IQueryable<BangGVBMResult> BangGVBM()
	{
		return this.CreateMethodCallQuery<BangGVBMResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.TimTheoTenHSCu", IsComposable=true)]
	public IQueryable<TimTheoTenHSCuResult> TimTheoTenHSCu()
	{
		return this.CreateMethodCallQuery<TimTheoTenHSCuResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.canbo", IsComposable=true)]
	public IQueryable<canboResult> canbo()
	{
		return this.CreateMethodCallQuery<canboResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.cbkhac", IsComposable=true)]
	public IQueryable<cbkhacResult> cbkhac()
	{
		return this.CreateMethodCallQuery<cbkhacResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.[dbo.funcStudent]", IsComposable=true)]
	public IQueryable<dbo_funcStudentResult> dbo_funcStudent()
	{
		return this.CreateMethodCallQuery<dbo_funcStudentResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.DiemTheoMon", IsComposable=true)]
	public IQueryable<DiemTheoMonResult> DiemTheoMon()
	{
		return this.CreateMethodCallQuery<DiemTheoMonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.gvlopmon", IsComposable=true)]
	public IQueryable<gvlopmonResult> gvlopmon()
	{
		return this.CreateMethodCallQuery<gvlopmonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.KTMAPL", IsComposable=true)]
	public IQueryable<KTMAPLResult> KTMAPL()
	{
		return this.CreateMethodCallQuery<KTMAPLResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadAdmin", IsComposable=true)]
	public IQueryable<LoadAdminResult> LoadAdmin()
	{
		return this.CreateMethodCallQuery<LoadAdminResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadGridViewCu", IsComposable=true)]
	public IQueryable<LoadGridViewCuResult> LoadGridViewCu([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Nam", DbType="Int")] System.Nullable<int> nam, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Khoi", DbType="Int")] System.Nullable<int> khoi, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Lop", DbType="Int")] System.Nullable<int> lop)
	{
		return this.CreateMethodCallQuery<LoadGridViewCuResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), nam, khoi, lop);
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadgrvPhanQuyen", IsComposable=true)]
	public IQueryable<LoadgrvPhanQuyenResult> LoadgrvPhanQuyen()
	{
		return this.CreateMethodCallQuery<LoadgrvPhanQuyenResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadGV", IsComposable=true)]
	public IQueryable<LoadGVResult> LoadGV()
	{
		return this.CreateMethodCallQuery<LoadGVResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadGVCu", IsComposable=true)]
	public IQueryable<LoadGVCuResult> LoadGVCu([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaKhoi", DbType="Int")] System.Nullable<int> maKhoi, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaNam", DbType="Int")] System.Nullable<int> maNam, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaLop", DbType="Int")] System.Nullable<int> maLop)
	{
		return this.CreateMethodCallQuery<LoadGVCuResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maKhoi, maNam, maLop);
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LoadLop", IsComposable=true)]
	public IQueryable<LoadLopResult> LoadLop([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaKhoi", DbType="Int")] System.Nullable<int> maKhoi)
	{
		return this.CreateMethodCallQuery<LoadLopResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maKhoi);
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LopcoHSnhohon50", IsComposable=true)]
	public IQueryable<LopcoHSnhohon50Result> LopcoHSnhohon50([global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaKhoi", DbType="Int")] System.Nullable<int> maKhoi, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="MaNam", DbType="Int")] System.Nullable<int> maNam)
	{
		return this.CreateMethodCallQuery<LopcoHSnhohon50Result>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), maKhoi, maNam);
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LopHS1011Cu", IsComposable=true)]
	public IQueryable<LopHS1011CuResult> LopHS1011Cu([global::System.Data.Linq.Mapping.ParameterAttribute(Name="Khoi", DbType="Int")] System.Nullable<int> khoi, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Nam", DbType="Int")] System.Nullable<int> nam)
	{
		return this.CreateMethodCallQuery<LopHS1011CuResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), khoi, nam);
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.LopMoi", IsComposable=true)]
	public IQueryable<LopMoiResult> LopMoi()
	{
		return this.CreateMethodCallQuery<LopMoiResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NamCu", IsComposable=true)]
	public IQueryable<NamCuResult> NamCu()
	{
		return this.CreateMethodCallQuery<NamCuResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NamMoi", IsComposable=true)]
	public IQueryable<NamMoiResult> NamMoi()
	{
		return this.CreateMethodCallQuery<NamMoiResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.NhomGVCN", IsComposable=true)]
	public IQueryable<NhomGVCNResult> NhomGVCN()
	{
		return this.CreateMethodCallQuery<NhomGVCNResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.PhanMon", IsComposable=true)]
	public IQueryable<PhanMonResult> PhanMon()
	{
		return this.CreateMethodCallQuery<PhanMonResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
	
	[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Score", IsComposable=true)]
	public IQueryable<ScoreResult> Score()
	{
		return this.CreateMethodCallQuery<ScoreResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassDepartments")]
public partial class ClassDepartment : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SchoolYearID;
	
	private int _ClassID;
	
	private int _DepartmentID;
	
	private string _TeacherID;
	
	private EntityRef<Class> _Class;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<Teacher> _Teacher;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnTeacherIDChanging(string value);
    partial void OnTeacherIDChanged();
    #endregion
	
	public ClassDepartment()
	{
		this._Class = default(EntityRef<Class>);
		this._Department = default(EntityRef<Department>);
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._Teacher = default(EntityRef<Teacher>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL")]
	public int DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				if (this._Teacher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeacherIDChanging(value);
				this.SendPropertyChanging();
				this._TeacherID = value;
				this.SendPropertyChanged("TeacherID");
				this.OnTeacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassDepartment", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
	public Class Class
	{
		get
		{
			return this._Class.Entity;
		}
		set
		{
			Class previousValue = this._Class.Entity;
			if (((previousValue != value) 
						|| (this._Class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class.Entity = null;
					previousValue.ClassDepartments.Remove(this);
				}
				this._Class.Entity = value;
				if ((value != null))
				{
					value.ClassDepartments.Add(this);
					this._ClassID = value.ClassID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_ClassDepartment", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.ClassDepartments.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.ClassDepartments.Add(this);
					this._DepartmentID = value.DepartmentID;
				}
				else
				{
					this._DepartmentID = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_ClassDepartment", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.ClassDepartments.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.ClassDepartments.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_ClassDepartment", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
	public Teacher Teacher
	{
		get
		{
			return this._Teacher.Entity;
		}
		set
		{
			Teacher previousValue = this._Teacher.Entity;
			if (((previousValue != value) 
						|| (this._Teacher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Teacher.Entity = null;
					previousValue.ClassDepartments.Remove(this);
				}
				this._Teacher.Entity = value;
				if ((value != null))
				{
					value.ClassDepartments.Add(this);
					this._TeacherID = value.TeacherID;
				}
				else
				{
					this._TeacherID = default(string);
				}
				this.SendPropertyChanged("Teacher");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Violations")]
public partial class Violation : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ViolationID;
	
	private string _ViolationName;
	
	private string _Description;
	
	private EntitySet<Sanction> _Sanctions;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnViolationIDChanging(int value);
    partial void OnViolationIDChanged();
    partial void OnViolationNameChanging(string value);
    partial void OnViolationNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
	
	public Violation()
	{
		this._Sanctions = new EntitySet<Sanction>(new Action<Sanction>(this.attach_Sanctions), new Action<Sanction>(this.detach_Sanctions));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViolationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ViolationID
	{
		get
		{
			return this._ViolationID;
		}
		set
		{
			if ((this._ViolationID != value))
			{
				this.OnViolationIDChanging(value);
				this.SendPropertyChanging();
				this._ViolationID = value;
				this.SendPropertyChanged("ViolationID");
				this.OnViolationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViolationName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string ViolationName
	{
		get
		{
			return this._ViolationName;
		}
		set
		{
			if ((this._ViolationName != value))
			{
				this.OnViolationNameChanging(value);
				this.SendPropertyChanging();
				this._ViolationName = value;
				this.SendPropertyChanged("ViolationName");
				this.OnViolationNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(300)")]
	public string Description
	{
		get
		{
			return this._Description;
		}
		set
		{
			if ((this._Description != value))
			{
				this.OnDescriptionChanging(value);
				this.SendPropertyChanging();
				this._Description = value;
				this.SendPropertyChanged("Description");
				this.OnDescriptionChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Violation_Sanction", Storage="_Sanctions", ThisKey="ViolationID", OtherKey="ViolationID")]
	public EntitySet<Sanction> Sanctions
	{
		get
		{
			return this._Sanctions;
		}
		set
		{
			this._Sanctions.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Violation = this;
	}
	
	private void detach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Violation = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Classes")]
public partial class Class : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _ClassID;
	
	private string _ClassName;
	
	private System.Nullable<int> _GradeSchoolID;
	
	private EntitySet<ClassDepartment> _ClassDepartments;
	
	private EntitySet<ClassStudent> _ClassStudents;
	
	private EntitySet<Conduct> _Conducts;
	
	private EntitySet<Sanction> _Sanctions;
	
	private EntitySet<TeacherSubject> _TeacherSubjects;
	
	private EntitySet<Score> _Scores;
	
	private EntityRef<GradeSchool> _GradeSchool;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnClassNameChanging(string value);
    partial void OnClassNameChanged();
    partial void OnGradeSchoolIDChanging(System.Nullable<int> value);
    partial void OnGradeSchoolIDChanged();
    #endregion
	
	public Class()
	{
		this._ClassDepartments = new EntitySet<ClassDepartment>(new Action<ClassDepartment>(this.attach_ClassDepartments), new Action<ClassDepartment>(this.detach_ClassDepartments));
		this._ClassStudents = new EntitySet<ClassStudent>(new Action<ClassStudent>(this.attach_ClassStudents), new Action<ClassStudent>(this.detach_ClassStudents));
		this._Conducts = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts), new Action<Conduct>(this.detach_Conducts));
		this._Sanctions = new EntitySet<Sanction>(new Action<Sanction>(this.attach_Sanctions), new Action<Sanction>(this.detach_Sanctions));
		this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
		this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
		this._GradeSchool = default(EntityRef<GradeSchool>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this.OnClassNameChanging(value);
				this.SendPropertyChanging();
				this._ClassName = value;
				this.SendPropertyChanged("ClassName");
				this.OnClassNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeSchoolID", DbType="Int")]
	public System.Nullable<int> GradeSchoolID
	{
		get
		{
			return this._GradeSchoolID;
		}
		set
		{
			if ((this._GradeSchoolID != value))
			{
				if (this._GradeSchool.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnGradeSchoolIDChanging(value);
				this.SendPropertyChanging();
				this._GradeSchoolID = value;
				this.SendPropertyChanged("GradeSchoolID");
				this.OnGradeSchoolIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassDepartment", Storage="_ClassDepartments", ThisKey="ClassID", OtherKey="ClassID")]
	public EntitySet<ClassDepartment> ClassDepartments
	{
		get
		{
			return this._ClassDepartments;
		}
		set
		{
			this._ClassDepartments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassStudent", Storage="_ClassStudents", ThisKey="ClassID", OtherKey="ClassID")]
	public EntitySet<ClassStudent> ClassStudents
	{
		get
		{
			return this._ClassStudents;
		}
		set
		{
			this._ClassStudents.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Conduct", Storage="_Conducts", ThisKey="ClassID", OtherKey="ClassID")]
	public EntitySet<Conduct> Conducts
	{
		get
		{
			return this._Conducts;
		}
		set
		{
			this._Conducts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Sanction", Storage="_Sanctions", ThisKey="ClassID", OtherKey="ClassID")]
	public EntitySet<Sanction> Sanctions
	{
		get
		{
			return this._Sanctions;
		}
		set
		{
			this._Sanctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TeacherSubject", Storage="_TeacherSubjects", ThisKey="ClassID", OtherKey="ClassID")]
	public EntitySet<TeacherSubject> TeacherSubjects
	{
		get
		{
			return this._TeacherSubjects;
		}
		set
		{
			this._TeacherSubjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Score", Storage="_Scores", ThisKey="ClassID", OtherKey="ClassID")]
	public EntitySet<Score> Scores
	{
		get
		{
			return this._Scores;
		}
		set
		{
			this._Scores.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GradeSchool_Class", Storage="_GradeSchool", ThisKey="GradeSchoolID", OtherKey="GradeSchoolID", IsForeignKey=true)]
	public GradeSchool GradeSchool
	{
		get
		{
			return this._GradeSchool.Entity;
		}
		set
		{
			GradeSchool previousValue = this._GradeSchool.Entity;
			if (((previousValue != value) 
						|| (this._GradeSchool.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._GradeSchool.Entity = null;
					previousValue.Classes.Remove(this);
				}
				this._GradeSchool.Entity = value;
				if ((value != null))
				{
					value.Classes.Add(this);
					this._GradeSchoolID = value.GradeSchoolID;
				}
				else
				{
					this._GradeSchoolID = default(Nullable<int>);
				}
				this.SendPropertyChanged("GradeSchool");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.Class = this;
	}
	
	private void detach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.Class = null;
	}
	
	private void attach_ClassStudents(ClassStudent entity)
	{
		this.SendPropertyChanging();
		entity.Class = this;
	}
	
	private void detach_ClassStudents(ClassStudent entity)
	{
		this.SendPropertyChanging();
		entity.Class = null;
	}
	
	private void attach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Class = this;
	}
	
	private void detach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Class = null;
	}
	
	private void attach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Class = this;
	}
	
	private void detach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Class = null;
	}
	
	private void attach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Class = this;
	}
	
	private void detach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Class = null;
	}
	
	private void attach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Class = this;
	}
	
	private void detach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Class = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ClassStudents")]
public partial class ClassStudent : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SchoolYearID;
	
	private int _ClassID;
	
	private string _StudentID;
	
	private EntityRef<Class> _Class;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<Student> _Student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    #endregion
	
	public ClassStudent()
	{
		this._Class = default(EntityRef<Class>);
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._Student = default(EntityRef<Student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				if (this._Student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_ClassStudent", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
	public Class Class
	{
		get
		{
			return this._Class.Entity;
		}
		set
		{
			Class previousValue = this._Class.Entity;
			if (((previousValue != value) 
						|| (this._Class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class.Entity = null;
					previousValue.ClassStudents.Remove(this);
				}
				this._Class.Entity = value;
				if ((value != null))
				{
					value.ClassStudents.Add(this);
					this._ClassID = value.ClassID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_ClassStudent", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.ClassStudents.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.ClassStudents.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ClassStudent", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
	public Student Student
	{
		get
		{
			return this._Student.Entity;
		}
		set
		{
			Student previousValue = this._Student.Entity;
			if (((previousValue != value) 
						|| (this._Student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Student.Entity = null;
					previousValue.ClassStudents.Remove(this);
				}
				this._Student.Entity = value;
				if ((value != null))
				{
					value.ClassStudents.Add(this);
					this._StudentID = value.StudentID;
				}
				else
				{
					this._StudentID = default(string);
				}
				this.SendPropertyChanged("Student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Conducts")]
public partial class Conduct : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SchoolYearID;
	
	private int _ClassID;
	
	private int _SemesterID;
	
	private string _StudentID;
	
	private string _Conduct1;
	
	private EntityRef<Class> _Class;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<Semester> _Semester;
	
	private EntityRef<Semester> _Semester1;
	
	private EntityRef<Student> _Student;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnConduct1Changing(string value);
    partial void OnConduct1Changed();
    #endregion
	
	public Conduct()
	{
		this._Class = default(EntityRef<Class>);
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._Semester = default(EntityRef<Semester>);
		this._Semester1 = default(EntityRef<Semester>);
		this._Student = default(EntityRef<Student>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				if ((this._Semester.HasLoadedOrAssignedValue || this._Semester1.HasLoadedOrAssignedValue))
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSemesterIDChanging(value);
				this.SendPropertyChanging();
				this._SemesterID = value;
				this.SendPropertyChanged("SemesterID");
				this.OnSemesterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				if (this._Student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Conduct1", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
	public string Conduct1
	{
		get
		{
			return this._Conduct1;
		}
		set
		{
			if ((this._Conduct1 != value))
			{
				this.OnConduct1Changing(value);
				this.SendPropertyChanging();
				this._Conduct1 = value;
				this.SendPropertyChanged("Conduct1");
				this.OnConduct1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Conduct", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
	public Class Class
	{
		get
		{
			return this._Class.Entity;
		}
		set
		{
			Class previousValue = this._Class.Entity;
			if (((previousValue != value) 
						|| (this._Class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class.Entity = null;
					previousValue.Conducts.Remove(this);
				}
				this._Class.Entity = value;
				if ((value != null))
				{
					value.Conducts.Add(this);
					this._ClassID = value.ClassID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Conduct", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.Conducts.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.Conducts.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Conduct", Storage="_Semester", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
	public Semester Semester
	{
		get
		{
			return this._Semester.Entity;
		}
		set
		{
			Semester previousValue = this._Semester.Entity;
			if (((previousValue != value) 
						|| (this._Semester.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Semester.Entity = null;
					previousValue.Conducts.Remove(this);
				}
				this._Semester.Entity = value;
				if ((value != null))
				{
					value.Conducts.Add(this);
					this._SemesterID = value.SemesterID;
				}
				else
				{
					this._SemesterID = default(int);
				}
				this.SendPropertyChanged("Semester");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Conduct1", Storage="_Semester1", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
	public Semester Semester1
	{
		get
		{
			return this._Semester1.Entity;
		}
		set
		{
			Semester previousValue = this._Semester1.Entity;
			if (((previousValue != value) 
						|| (this._Semester1.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Semester1.Entity = null;
					previousValue.Conducts1.Remove(this);
				}
				this._Semester1.Entity = value;
				if ((value != null))
				{
					value.Conducts1.Add(this);
					this._SemesterID = value.SemesterID;
				}
				else
				{
					this._SemesterID = default(int);
				}
				this.SendPropertyChanged("Semester1");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Conduct", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
	public Student Student
	{
		get
		{
			return this._Student.Entity;
		}
		set
		{
			Student previousValue = this._Student.Entity;
			if (((previousValue != value) 
						|| (this._Student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Student.Entity = null;
					previousValue.Conducts.Remove(this);
				}
				this._Student.Entity = value;
				if ((value != null))
				{
					value.Conducts.Add(this);
					this._StudentID = value.StudentID;
				}
				else
				{
					this._StudentID = default(string);
				}
				this.SendPropertyChanged("Student");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
public partial class Department : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentID;
	
	private string _DepartmentName;
	
	private EntitySet<ClassDepartment> _ClassDepartments;
	
	private EntitySet<DepartmentSubject> _DepartmentSubjects;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnDepartmentNameChanging(string value);
    partial void OnDepartmentNameChanged();
    #endregion
	
	public Department()
	{
		this._ClassDepartments = new EntitySet<ClassDepartment>(new Action<ClassDepartment>(this.attach_ClassDepartments), new Action<ClassDepartment>(this.detach_ClassDepartments));
		this._DepartmentSubjects = new EntitySet<DepartmentSubject>(new Action<DepartmentSubject>(this.attach_DepartmentSubjects), new Action<DepartmentSubject>(this.detach_DepartmentSubjects));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentName", DbType="NVarChar(50)")]
	public string DepartmentName
	{
		get
		{
			return this._DepartmentName;
		}
		set
		{
			if ((this._DepartmentName != value))
			{
				this.OnDepartmentNameChanging(value);
				this.SendPropertyChanging();
				this._DepartmentName = value;
				this.SendPropertyChanged("DepartmentName");
				this.OnDepartmentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_ClassDepartment", Storage="_ClassDepartments", ThisKey="DepartmentID", OtherKey="DepartmentID")]
	public EntitySet<ClassDepartment> ClassDepartments
	{
		get
		{
			return this._ClassDepartments;
		}
		set
		{
			this._ClassDepartments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentSubject", Storage="_DepartmentSubjects", ThisKey="DepartmentID", OtherKey="DepartmentID")]
	public EntitySet<DepartmentSubject> DepartmentSubjects
	{
		get
		{
			return this._DepartmentSubjects;
		}
		set
		{
			this._DepartmentSubjects.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
	
	private void attach_DepartmentSubjects(DepartmentSubject entity)
	{
		this.SendPropertyChanging();
		entity.Department = this;
	}
	
	private void detach_DepartmentSubjects(DepartmentSubject entity)
	{
		this.SendPropertyChanging();
		entity.Department = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DepartmentSubjects")]
public partial class DepartmentSubject : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _DepartmentID;
	
	private int _SubjectID;
	
	private System.Nullable<int> _Multiplier;
	
	private EntityRef<Department> _Department;
	
	private EntityRef<Subject> _Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnDepartmentIDChanging(int value);
    partial void OnDepartmentIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnMultiplierChanging(System.Nullable<int> value);
    partial void OnMultiplierChanged();
    #endregion
	
	public DepartmentSubject()
	{
		this._Department = default(EntityRef<Department>);
		this._Subject = default(EntityRef<Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DepartmentID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int DepartmentID
	{
		get
		{
			return this._DepartmentID;
		}
		set
		{
			if ((this._DepartmentID != value))
			{
				if (this._Department.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnDepartmentIDChanging(value);
				this.SendPropertyChanging();
				this._DepartmentID = value;
				this.SendPropertyChanged("DepartmentID");
				this.OnDepartmentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				if (this._Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubjectIDChanging(value);
				this.SendPropertyChanging();
				this._SubjectID = value;
				this.SendPropertyChanged("SubjectID");
				this.OnSubjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Multiplier", DbType="Int")]
	public System.Nullable<int> Multiplier
	{
		get
		{
			return this._Multiplier;
		}
		set
		{
			if ((this._Multiplier != value))
			{
				this.OnMultiplierChanging(value);
				this.SendPropertyChanging();
				this._Multiplier = value;
				this.SendPropertyChanged("Multiplier");
				this.OnMultiplierChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Department_DepartmentSubject", Storage="_Department", ThisKey="DepartmentID", OtherKey="DepartmentID", IsForeignKey=true)]
	public Department Department
	{
		get
		{
			return this._Department.Entity;
		}
		set
		{
			Department previousValue = this._Department.Entity;
			if (((previousValue != value) 
						|| (this._Department.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Department.Entity = null;
					previousValue.DepartmentSubjects.Remove(this);
				}
				this._Department.Entity = value;
				if ((value != null))
				{
					value.DepartmentSubjects.Add(this);
					this._DepartmentID = value.DepartmentID;
				}
				else
				{
					this._DepartmentID = default(int);
				}
				this.SendPropertyChanged("Department");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DepartmentSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
	public Subject Subject
	{
		get
		{
			return this._Subject.Entity;
		}
		set
		{
			Subject previousValue = this._Subject.Entity;
			if (((previousValue != value) 
						|| (this._Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Subject.Entity = null;
					previousValue.DepartmentSubjects.Remove(this);
				}
				this._Subject.Entity = value;
				if ((value != null))
				{
					value.DepartmentSubjects.Add(this);
					this._SubjectID = value.SubjectID;
				}
				else
				{
					this._SubjectID = default(int);
				}
				this.SendPropertyChanged("Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.GradeSchools")]
public partial class GradeSchool : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _GradeSchoolID;
	
	private string _GradeSchoolName;
	
	private EntitySet<Class> _Classes;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGradeSchoolIDChanging(int value);
    partial void OnGradeSchoolIDChanged();
    partial void OnGradeSchoolNameChanging(string value);
    partial void OnGradeSchoolNameChanged();
    #endregion
	
	public GradeSchool()
	{
		this._Classes = new EntitySet<Class>(new Action<Class>(this.attach_Classes), new Action<Class>(this.detach_Classes));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeSchoolID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int GradeSchoolID
	{
		get
		{
			return this._GradeSchoolID;
		}
		set
		{
			if ((this._GradeSchoolID != value))
			{
				this.OnGradeSchoolIDChanging(value);
				this.SendPropertyChanging();
				this._GradeSchoolID = value;
				this.SendPropertyChanged("GradeSchoolID");
				this.OnGradeSchoolIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GradeSchoolName", DbType="NVarChar(50)")]
	public string GradeSchoolName
	{
		get
		{
			return this._GradeSchoolName;
		}
		set
		{
			if ((this._GradeSchoolName != value))
			{
				this.OnGradeSchoolNameChanging(value);
				this.SendPropertyChanging();
				this._GradeSchoolName = value;
				this.SendPropertyChanged("GradeSchoolName");
				this.OnGradeSchoolNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="GradeSchool_Class", Storage="_Classes", ThisKey="GradeSchoolID", OtherKey="GradeSchoolID")]
	public EntitySet<Class> Classes
	{
		get
		{
			return this._Classes;
		}
		set
		{
			this._Classes.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Classes(Class entity)
	{
		this.SendPropertyChanging();
		entity.GradeSchool = this;
	}
	
	private void detach_Classes(Class entity)
	{
		this.SendPropertyChanging();
		entity.GradeSchool = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Sanctions")]
public partial class Sanction : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SanctionID;
	
	private int _SchoolYearID;
	
	private System.Nullable<int> _SemesterID;
	
	private int _ClassID;
	
	private string _StudentID;
	
	private System.Nullable<int> _SubjectID;
	
	private int _ViolationID;
	
	private System.DateTime _DateViolation;
	
	private string _SanctionName;
	
	private System.Nullable<bool> _StateMessage;
	
	private System.Nullable<bool> _StateSendMessage;
	
	private System.Nullable<int> _Number;
	
	private EntityRef<Class> _Class;
	
	private EntityRef<Violation> _Violation;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<Semester> _Semester;
	
	private EntityRef<Student> _Student;
	
	private EntityRef<Subject> _Subject;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSanctionIDChanging(int value);
    partial void OnSanctionIDChanged();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnSemesterIDChanging(System.Nullable<int> value);
    partial void OnSemesterIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnSubjectIDChanging(System.Nullable<int> value);
    partial void OnSubjectIDChanged();
    partial void OnViolationIDChanging(int value);
    partial void OnViolationIDChanged();
    partial void OnDateViolationChanging(System.DateTime value);
    partial void OnDateViolationChanged();
    partial void OnSanctionNameChanging(string value);
    partial void OnSanctionNameChanged();
    partial void OnStateMessageChanging(System.Nullable<bool> value);
    partial void OnStateMessageChanged();
    partial void OnStateSendMessageChanging(System.Nullable<bool> value);
    partial void OnStateSendMessageChanged();
    partial void OnNumberChanging(System.Nullable<int> value);
    partial void OnNumberChanged();
    #endregion
	
	public Sanction()
	{
		this._Class = default(EntityRef<Class>);
		this._Violation = default(EntityRef<Violation>);
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._Semester = default(EntityRef<Semester>);
		this._Student = default(EntityRef<Student>);
		this._Subject = default(EntityRef<Subject>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SanctionID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SanctionID
	{
		get
		{
			return this._SanctionID;
		}
		set
		{
			if ((this._SanctionID != value))
			{
				this.OnSanctionIDChanging(value);
				this.SendPropertyChanging();
				this._SanctionID = value;
				this.SendPropertyChanged("SanctionID");
				this.OnSanctionIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int")]
	public System.Nullable<int> SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				if (this._Semester.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSemesterIDChanging(value);
				this.SendPropertyChanging();
				this._SemesterID = value;
				this.SendPropertyChanged("SemesterID");
				this.OnSemesterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				if (this._Student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int")]
	public System.Nullable<int> SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				if (this._Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubjectIDChanging(value);
				this.SendPropertyChanging();
				this._SubjectID = value;
				this.SendPropertyChanged("SubjectID");
				this.OnSubjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ViolationID", DbType="Int NOT NULL")]
	public int ViolationID
	{
		get
		{
			return this._ViolationID;
		}
		set
		{
			if ((this._ViolationID != value))
			{
				if (this._Violation.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnViolationIDChanging(value);
				this.SendPropertyChanging();
				this._ViolationID = value;
				this.SendPropertyChanged("ViolationID");
				this.OnViolationIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateViolation", DbType="DateTime NOT NULL")]
	public System.DateTime DateViolation
	{
		get
		{
			return this._DateViolation;
		}
		set
		{
			if ((this._DateViolation != value))
			{
				this.OnDateViolationChanging(value);
				this.SendPropertyChanging();
				this._DateViolation = value;
				this.SendPropertyChanged("DateViolation");
				this.OnDateViolationChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SanctionName", DbType="NVarChar(300) NOT NULL", CanBeNull=false)]
	public string SanctionName
	{
		get
		{
			return this._SanctionName;
		}
		set
		{
			if ((this._SanctionName != value))
			{
				this.OnSanctionNameChanging(value);
				this.SendPropertyChanging();
				this._SanctionName = value;
				this.SendPropertyChanged("SanctionName");
				this.OnSanctionNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateMessage", DbType="Bit")]
	public System.Nullable<bool> StateMessage
	{
		get
		{
			return this._StateMessage;
		}
		set
		{
			if ((this._StateMessage != value))
			{
				this.OnStateMessageChanging(value);
				this.SendPropertyChanging();
				this._StateMessage = value;
				this.SendPropertyChanged("StateMessage");
				this.OnStateMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StateSendMessage", DbType="Bit")]
	public System.Nullable<bool> StateSendMessage
	{
		get
		{
			return this._StateSendMessage;
		}
		set
		{
			if ((this._StateSendMessage != value))
			{
				this.OnStateSendMessageChanging(value);
				this.SendPropertyChanging();
				this._StateSendMessage = value;
				this.SendPropertyChanged("StateSendMessage");
				this.OnStateSendMessageChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Number", DbType="Int")]
	public System.Nullable<int> Number
	{
		get
		{
			return this._Number;
		}
		set
		{
			if ((this._Number != value))
			{
				this.OnNumberChanging(value);
				this.SendPropertyChanging();
				this._Number = value;
				this.SendPropertyChanged("Number");
				this.OnNumberChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Sanction", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
	public Class Class
	{
		get
		{
			return this._Class.Entity;
		}
		set
		{
			Class previousValue = this._Class.Entity;
			if (((previousValue != value) 
						|| (this._Class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class.Entity = null;
					previousValue.Sanctions.Remove(this);
				}
				this._Class.Entity = value;
				if ((value != null))
				{
					value.Sanctions.Add(this);
					this._ClassID = value.ClassID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Violation_Sanction", Storage="_Violation", ThisKey="ViolationID", OtherKey="ViolationID", IsForeignKey=true)]
	public Violation Violation
	{
		get
		{
			return this._Violation.Entity;
		}
		set
		{
			Violation previousValue = this._Violation.Entity;
			if (((previousValue != value) 
						|| (this._Violation.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Violation.Entity = null;
					previousValue.Sanctions.Remove(this);
				}
				this._Violation.Entity = value;
				if ((value != null))
				{
					value.Sanctions.Add(this);
					this._ViolationID = value.ViolationID;
				}
				else
				{
					this._ViolationID = default(int);
				}
				this.SendPropertyChanged("Violation");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Sanction", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.Sanctions.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.Sanctions.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Sanction", Storage="_Semester", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
	public Semester Semester
	{
		get
		{
			return this._Semester.Entity;
		}
		set
		{
			Semester previousValue = this._Semester.Entity;
			if (((previousValue != value) 
						|| (this._Semester.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Semester.Entity = null;
					previousValue.Sanctions.Remove(this);
				}
				this._Semester.Entity = value;
				if ((value != null))
				{
					value.Sanctions.Add(this);
					this._SemesterID = value.SemesterID;
				}
				else
				{
					this._SemesterID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Semester");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Sanction", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
	public Student Student
	{
		get
		{
			return this._Student.Entity;
		}
		set
		{
			Student previousValue = this._Student.Entity;
			if (((previousValue != value) 
						|| (this._Student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Student.Entity = null;
					previousValue.Sanctions.Remove(this);
				}
				this._Student.Entity = value;
				if ((value != null))
				{
					value.Sanctions.Add(this);
					this._StudentID = value.StudentID;
				}
				else
				{
					this._StudentID = default(string);
				}
				this.SendPropertyChanged("Student");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Sanction", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
	public Subject Subject
	{
		get
		{
			return this._Subject.Entity;
		}
		set
		{
			Subject previousValue = this._Subject.Entity;
			if (((previousValue != value) 
						|| (this._Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Subject.Entity = null;
					previousValue.Sanctions.Remove(this);
				}
				this._Subject.Entity = value;
				if ((value != null))
				{
					value.Sanctions.Add(this);
					this._SubjectID = value.SubjectID;
				}
				else
				{
					this._SubjectID = default(Nullable<int>);
				}
				this.SendPropertyChanged("Subject");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.SchoolYears")]
public partial class SchoolYear : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SchoolYearID;
	
	private string _SchoolYearName;
	
	private System.Nullable<System.DateTime> _BeginDate;
	
	private System.Nullable<System.DateTime> _EndDate;
	
	private EntitySet<ClassDepartment> _ClassDepartments;
	
	private EntitySet<ClassStudent> _ClassStudents;
	
	private EntitySet<Conduct> _Conducts;
	
	private EntitySet<Sanction> _Sanctions;
	
	private EntitySet<TeacherSubject> _TeacherSubjects;
	
	private EntitySet<Users_UserGroup> _Users_UserGroups;
	
	private EntitySet<Score> _Scores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnSchoolYearNameChanging(string value);
    partial void OnSchoolYearNameChanged();
    partial void OnBeginDateChanging(System.Nullable<System.DateTime> value);
    partial void OnBeginDateChanged();
    partial void OnEndDateChanging(System.Nullable<System.DateTime> value);
    partial void OnEndDateChanged();
    #endregion
	
	public SchoolYear()
	{
		this._ClassDepartments = new EntitySet<ClassDepartment>(new Action<ClassDepartment>(this.attach_ClassDepartments), new Action<ClassDepartment>(this.detach_ClassDepartments));
		this._ClassStudents = new EntitySet<ClassStudent>(new Action<ClassStudent>(this.attach_ClassStudents), new Action<ClassStudent>(this.detach_ClassStudents));
		this._Conducts = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts), new Action<Conduct>(this.detach_Conducts));
		this._Sanctions = new EntitySet<Sanction>(new Action<Sanction>(this.attach_Sanctions), new Action<Sanction>(this.detach_Sanctions));
		this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
		this._Users_UserGroups = new EntitySet<Users_UserGroup>(new Action<Users_UserGroup>(this.attach_Users_UserGroups), new Action<Users_UserGroup>(this.detach_Users_UserGroups));
		this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this.OnSchoolYearNameChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearName = value;
				this.SendPropertyChanged("SchoolYearName");
				this.OnSchoolYearNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BeginDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> BeginDate
	{
		get
		{
			return this._BeginDate;
		}
		set
		{
			if ((this._BeginDate != value))
			{
				this.OnBeginDateChanging(value);
				this.SendPropertyChanging();
				this._BeginDate = value;
				this.SendPropertyChanged("BeginDate");
				this.OnBeginDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EndDate", DbType="DateTime")]
	public System.Nullable<System.DateTime> EndDate
	{
		get
		{
			return this._EndDate;
		}
		set
		{
			if ((this._EndDate != value))
			{
				this.OnEndDateChanging(value);
				this.SendPropertyChanging();
				this._EndDate = value;
				this.SendPropertyChanged("EndDate");
				this.OnEndDateChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_ClassDepartment", Storage="_ClassDepartments", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<ClassDepartment> ClassDepartments
	{
		get
		{
			return this._ClassDepartments;
		}
		set
		{
			this._ClassDepartments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_ClassStudent", Storage="_ClassStudents", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<ClassStudent> ClassStudents
	{
		get
		{
			return this._ClassStudents;
		}
		set
		{
			this._ClassStudents.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Conduct", Storage="_Conducts", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<Conduct> Conducts
	{
		get
		{
			return this._Conducts;
		}
		set
		{
			this._Conducts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Sanction", Storage="_Sanctions", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<Sanction> Sanctions
	{
		get
		{
			return this._Sanctions;
		}
		set
		{
			this._Sanctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_TeacherSubject", Storage="_TeacherSubjects", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<TeacherSubject> TeacherSubjects
	{
		get
		{
			return this._TeacherSubjects;
		}
		set
		{
			this._TeacherSubjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Users_UserGroup", Storage="_Users_UserGroups", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<Users_UserGroup> Users_UserGroups
	{
		get
		{
			return this._Users_UserGroups;
		}
		set
		{
			this._Users_UserGroups.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Score", Storage="_Scores", ThisKey="SchoolYearID", OtherKey="SchoolYearID")]
	public EntitySet<Score> Scores
	{
		get
		{
			return this._Scores;
		}
		set
		{
			this._Scores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
	
	private void attach_ClassStudents(ClassStudent entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_ClassStudents(ClassStudent entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
	
	private void attach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
	
	private void attach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
	
	private void attach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
	
	private void attach_Users_UserGroups(Users_UserGroup entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_Users_UserGroups(Users_UserGroup entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
	
	private void attach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = this;
	}
	
	private void detach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.SchoolYear = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Semesters")]
public partial class Semester : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SemesterID;
	
	private string _SemesterName;
	
	private EntitySet<Conduct> _Conducts;
	
	private EntitySet<Conduct> _Conducts1;
	
	private EntitySet<Sanction> _Sanctions;
	
	private EntitySet<TeacherSubject> _TeacherSubjects;
	
	private EntitySet<Score> _Scores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnSemesterNameChanging(string value);
    partial void OnSemesterNameChanged();
    #endregion
	
	public Semester()
	{
		this._Conducts = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts), new Action<Conduct>(this.detach_Conducts));
		this._Conducts1 = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts1), new Action<Conduct>(this.detach_Conducts1));
		this._Sanctions = new EntitySet<Sanction>(new Action<Sanction>(this.attach_Sanctions), new Action<Sanction>(this.detach_Sanctions));
		this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
		this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				this.OnSemesterIDChanging(value);
				this.SendPropertyChanging();
				this._SemesterID = value;
				this.SendPropertyChanged("SemesterID");
				this.OnSemesterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterName", DbType="NVarChar(50)")]
	public string SemesterName
	{
		get
		{
			return this._SemesterName;
		}
		set
		{
			if ((this._SemesterName != value))
			{
				this.OnSemesterNameChanging(value);
				this.SendPropertyChanging();
				this._SemesterName = value;
				this.SendPropertyChanged("SemesterName");
				this.OnSemesterNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Conduct", Storage="_Conducts", ThisKey="SemesterID", OtherKey="SemesterID")]
	public EntitySet<Conduct> Conducts
	{
		get
		{
			return this._Conducts;
		}
		set
		{
			this._Conducts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Conduct1", Storage="_Conducts1", ThisKey="SemesterID", OtherKey="SemesterID")]
	public EntitySet<Conduct> Conducts1
	{
		get
		{
			return this._Conducts1;
		}
		set
		{
			this._Conducts1.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Sanction", Storage="_Sanctions", ThisKey="SemesterID", OtherKey="SemesterID")]
	public EntitySet<Sanction> Sanctions
	{
		get
		{
			return this._Sanctions;
		}
		set
		{
			this._Sanctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_TeacherSubject", Storage="_TeacherSubjects", ThisKey="SemesterID", OtherKey="SemesterID")]
	public EntitySet<TeacherSubject> TeacherSubjects
	{
		get
		{
			return this._TeacherSubjects;
		}
		set
		{
			this._TeacherSubjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Score", Storage="_Scores", ThisKey="SemesterID", OtherKey="SemesterID")]
	public EntitySet<Score> Scores
	{
		get
		{
			return this._Scores;
		}
		set
		{
			this._Scores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Semester = this;
	}
	
	private void detach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Semester = null;
	}
	
	private void attach_Conducts1(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Semester1 = this;
	}
	
	private void detach_Conducts1(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Semester1 = null;
	}
	
	private void attach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Semester = this;
	}
	
	private void detach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Semester = null;
	}
	
	private void attach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Semester = this;
	}
	
	private void detach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Semester = null;
	}
	
	private void attach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Semester = this;
	}
	
	private void detach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Semester = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
public partial class Student : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _StudentID;
	
	private string _StudentName;
	
	private System.Nullable<System.DateTime> _DateOfBirth;
	
	private string _Gender;
	
	private string _Address;
	
	private string _PhoneFixe;
	
	private string _MobilePhone;
	
	private EntitySet<ClassStudent> _ClassStudents;
	
	private EntitySet<Conduct> _Conducts;
	
	private EntitySet<Sanction> _Sanctions;
	
	private EntitySet<Score> _Scores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnStudentNameChanging(string value);
    partial void OnStudentNameChanged();
    partial void OnDateOfBirthChanging(System.Nullable<System.DateTime> value);
    partial void OnDateOfBirthChanged();
    partial void OnGenderChanging(string value);
    partial void OnGenderChanged();
    partial void OnAddressChanging(string value);
    partial void OnAddressChanged();
    partial void OnPhoneFixeChanging(string value);
    partial void OnPhoneFixeChanged();
    partial void OnMobilePhoneChanging(string value);
    partial void OnMobilePhoneChanged();
    #endregion
	
	public Student()
	{
		this._ClassStudents = new EntitySet<ClassStudent>(new Action<ClassStudent>(this.attach_ClassStudents), new Action<ClassStudent>(this.detach_ClassStudents));
		this._Conducts = new EntitySet<Conduct>(new Action<Conduct>(this.attach_Conducts), new Action<Conduct>(this.detach_Conducts));
		this._Sanctions = new EntitySet<Sanction>(new Action<Sanction>(this.attach_Sanctions), new Action<Sanction>(this.detach_Sanctions));
		this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(300)")]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this.OnStudentNameChanging(value);
				this.SendPropertyChanging();
				this._StudentName = value;
				this.SendPropertyChanged("StudentName");
				this.OnStudentNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOfBirth", DbType="DateTime")]
	public System.Nullable<System.DateTime> DateOfBirth
	{
		get
		{
			return this._DateOfBirth;
		}
		set
		{
			if ((this._DateOfBirth != value))
			{
				this.OnDateOfBirthChanging(value);
				this.SendPropertyChanging();
				this._DateOfBirth = value;
				this.SendPropertyChanged("DateOfBirth");
				this.OnDateOfBirthChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Gender", DbType="NVarChar(5)")]
	public string Gender
	{
		get
		{
			return this._Gender;
		}
		set
		{
			if ((this._Gender != value))
			{
				this.OnGenderChanging(value);
				this.SendPropertyChanging();
				this._Gender = value;
				this.SendPropertyChanged("Gender");
				this.OnGenderChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Address", DbType="NVarChar(300)")]
	public string Address
	{
		get
		{
			return this._Address;
		}
		set
		{
			if ((this._Address != value))
			{
				this.OnAddressChanging(value);
				this.SendPropertyChanging();
				this._Address = value;
				this.SendPropertyChanged("Address");
				this.OnAddressChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PhoneFixe", DbType="NChar(15)")]
	public string PhoneFixe
	{
		get
		{
			return this._PhoneFixe;
		}
		set
		{
			if ((this._PhoneFixe != value))
			{
				this.OnPhoneFixeChanging(value);
				this.SendPropertyChanging();
				this._PhoneFixe = value;
				this.SendPropertyChanged("PhoneFixe");
				this.OnPhoneFixeChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MobilePhone", DbType="NChar(15)")]
	public string MobilePhone
	{
		get
		{
			return this._MobilePhone;
		}
		set
		{
			if ((this._MobilePhone != value))
			{
				this.OnMobilePhoneChanging(value);
				this.SendPropertyChanging();
				this._MobilePhone = value;
				this.SendPropertyChanged("MobilePhone");
				this.OnMobilePhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_ClassStudent", Storage="_ClassStudents", ThisKey="StudentID", OtherKey="StudentID")]
	public EntitySet<ClassStudent> ClassStudents
	{
		get
		{
			return this._ClassStudents;
		}
		set
		{
			this._ClassStudents.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Conduct", Storage="_Conducts", ThisKey="StudentID", OtherKey="StudentID")]
	public EntitySet<Conduct> Conducts
	{
		get
		{
			return this._Conducts;
		}
		set
		{
			this._Conducts.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Sanction", Storage="_Sanctions", ThisKey="StudentID", OtherKey="StudentID")]
	public EntitySet<Sanction> Sanctions
	{
		get
		{
			return this._Sanctions;
		}
		set
		{
			this._Sanctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Score", Storage="_Scores", ThisKey="StudentID", OtherKey="StudentID")]
	public EntitySet<Score> Scores
	{
		get
		{
			return this._Scores;
		}
		set
		{
			this._Scores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClassStudents(ClassStudent entity)
	{
		this.SendPropertyChanging();
		entity.Student = this;
	}
	
	private void detach_ClassStudents(ClassStudent entity)
	{
		this.SendPropertyChanging();
		entity.Student = null;
	}
	
	private void attach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Student = this;
	}
	
	private void detach_Conducts(Conduct entity)
	{
		this.SendPropertyChanging();
		entity.Student = null;
	}
	
	private void attach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Student = this;
	}
	
	private void detach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Student = null;
	}
	
	private void attach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Student = this;
	}
	
	private void detach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Student = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Subjects")]
public partial class Subject : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _SubjectID;
	
	private string _SubjectName;
	
	private EntitySet<DepartmentSubject> _DepartmentSubjects;
	
	private EntitySet<Sanction> _Sanctions;
	
	private EntitySet<TeacherSubject> _TeacherSubjects;
	
	private EntitySet<Score> _Scores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnSubjectNameChanging(string value);
    partial void OnSubjectNameChanged();
    #endregion
	
	public Subject()
	{
		this._DepartmentSubjects = new EntitySet<DepartmentSubject>(new Action<DepartmentSubject>(this.attach_DepartmentSubjects), new Action<DepartmentSubject>(this.detach_DepartmentSubjects));
		this._Sanctions = new EntitySet<Sanction>(new Action<Sanction>(this.attach_Sanctions), new Action<Sanction>(this.detach_Sanctions));
		this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
		this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				this.OnSubjectIDChanging(value);
				this.SendPropertyChanging();
				this._SubjectID = value;
				this.SendPropertyChanged("SubjectID");
				this.OnSubjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(300)")]
	public string SubjectName
	{
		get
		{
			return this._SubjectName;
		}
		set
		{
			if ((this._SubjectName != value))
			{
				this.OnSubjectNameChanging(value);
				this.SendPropertyChanging();
				this._SubjectName = value;
				this.SendPropertyChanged("SubjectName");
				this.OnSubjectNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_DepartmentSubject", Storage="_DepartmentSubjects", ThisKey="SubjectID", OtherKey="SubjectID")]
	public EntitySet<DepartmentSubject> DepartmentSubjects
	{
		get
		{
			return this._DepartmentSubjects;
		}
		set
		{
			this._DepartmentSubjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Sanction", Storage="_Sanctions", ThisKey="SubjectID", OtherKey="SubjectID")]
	public EntitySet<Sanction> Sanctions
	{
		get
		{
			return this._Sanctions;
		}
		set
		{
			this._Sanctions.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_TeacherSubject", Storage="_TeacherSubjects", ThisKey="SubjectID", OtherKey="SubjectID")]
	public EntitySet<TeacherSubject> TeacherSubjects
	{
		get
		{
			return this._TeacherSubjects;
		}
		set
		{
			this._TeacherSubjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Score", Storage="_Scores", ThisKey="SubjectID", OtherKey="SubjectID")]
	public EntitySet<Score> Scores
	{
		get
		{
			return this._Scores;
		}
		set
		{
			this._Scores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_DepartmentSubjects(DepartmentSubject entity)
	{
		this.SendPropertyChanging();
		entity.Subject = this;
	}
	
	private void detach_DepartmentSubjects(DepartmentSubject entity)
	{
		this.SendPropertyChanging();
		entity.Subject = null;
	}
	
	private void attach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Subject = this;
	}
	
	private void detach_Sanctions(Sanction entity)
	{
		this.SendPropertyChanging();
		entity.Subject = null;
	}
	
	private void attach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Subject = this;
	}
	
	private void detach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Subject = null;
	}
	
	private void attach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Subject = this;
	}
	
	private void detach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.Subject = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TeacherSubjects")]
public partial class TeacherSubject : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _TeacherID;
	
	private int _SubjectID;
	
	private int _SemesterID;
	
	private int _SchoolYearID;
	
	private int _ClassID;
	
	private EntityRef<Class> _Class;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<Semester> _Semester;
	
	private EntityRef<Subject> _Subject;
	
	private EntityRef<Teacher> _Teacher;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIDChanging(string value);
    partial void OnTeacherIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    #endregion
	
	public TeacherSubject()
	{
		this._Class = default(EntityRef<Class>);
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._Semester = default(EntityRef<Semester>);
		this._Subject = default(EntityRef<Subject>);
		this._Teacher = default(EntityRef<Teacher>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				if (this._Teacher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeacherIDChanging(value);
				this.SendPropertyChanging();
				this._TeacherID = value;
				this.SendPropertyChanged("TeacherID");
				this.OnTeacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				if (this._Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubjectIDChanging(value);
				this.SendPropertyChanging();
				this._SubjectID = value;
				this.SendPropertyChanged("SubjectID");
				this.OnSubjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				if (this._Semester.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSemesterIDChanging(value);
				this.SendPropertyChanging();
				this._SemesterID = value;
				this.SendPropertyChanged("SemesterID");
				this.OnSemesterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_TeacherSubject", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
	public Class Class
	{
		get
		{
			return this._Class.Entity;
		}
		set
		{
			Class previousValue = this._Class.Entity;
			if (((previousValue != value) 
						|| (this._Class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class.Entity = null;
					previousValue.TeacherSubjects.Remove(this);
				}
				this._Class.Entity = value;
				if ((value != null))
				{
					value.TeacherSubjects.Add(this);
					this._ClassID = value.ClassID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_TeacherSubject", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.TeacherSubjects.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.TeacherSubjects.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_TeacherSubject", Storage="_Semester", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
	public Semester Semester
	{
		get
		{
			return this._Semester.Entity;
		}
		set
		{
			Semester previousValue = this._Semester.Entity;
			if (((previousValue != value) 
						|| (this._Semester.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Semester.Entity = null;
					previousValue.TeacherSubjects.Remove(this);
				}
				this._Semester.Entity = value;
				if ((value != null))
				{
					value.TeacherSubjects.Add(this);
					this._SemesterID = value.SemesterID;
				}
				else
				{
					this._SemesterID = default(int);
				}
				this.SendPropertyChanged("Semester");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_TeacherSubject", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
	public Subject Subject
	{
		get
		{
			return this._Subject.Entity;
		}
		set
		{
			Subject previousValue = this._Subject.Entity;
			if (((previousValue != value) 
						|| (this._Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Subject.Entity = null;
					previousValue.TeacherSubjects.Remove(this);
				}
				this._Subject.Entity = value;
				if ((value != null))
				{
					value.TeacherSubjects.Add(this);
					this._SubjectID = value.SubjectID;
				}
				else
				{
					this._SubjectID = default(int);
				}
				this.SendPropertyChanged("Subject");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherSubject", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
	public Teacher Teacher
	{
		get
		{
			return this._Teacher.Entity;
		}
		set
		{
			Teacher previousValue = this._Teacher.Entity;
			if (((previousValue != value) 
						|| (this._Teacher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Teacher.Entity = null;
					previousValue.TeacherSubjects.Remove(this);
				}
				this._Teacher.Entity = value;
				if ((value != null))
				{
					value.TeacherSubjects.Add(this);
					this._TeacherID = value.TeacherID;
				}
				else
				{
					this._TeacherID = default(string);
				}
				this.SendPropertyChanged("Teacher");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypeScores")]
public partial class TypeScore : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _TypeScoreID;
	
	private string _TypeScoreName;
	
	private EntitySet<Score> _Scores;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTypeScoreIDChanging(int value);
    partial void OnTypeScoreIDChanged();
    partial void OnTypeScoreNameChanging(string value);
    partial void OnTypeScoreNameChanged();
    #endregion
	
	public TypeScore()
	{
		this._Scores = new EntitySet<Score>(new Action<Score>(this.attach_Scores), new Action<Score>(this.detach_Scores));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeScoreID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int TypeScoreID
	{
		get
		{
			return this._TypeScoreID;
		}
		set
		{
			if ((this._TypeScoreID != value))
			{
				this.OnTypeScoreIDChanging(value);
				this.SendPropertyChanging();
				this._TypeScoreID = value;
				this.SendPropertyChanged("TypeScoreID");
				this.OnTypeScoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeScoreName", DbType="NVarChar(50)")]
	public string TypeScoreName
	{
		get
		{
			return this._TypeScoreName;
		}
		set
		{
			if ((this._TypeScoreName != value))
			{
				this.OnTypeScoreNameChanging(value);
				this.SendPropertyChanging();
				this._TypeScoreName = value;
				this.SendPropertyChanged("TypeScoreName");
				this.OnTypeScoreNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeScore_Score", Storage="_Scores", ThisKey="TypeScoreID", OtherKey="TypeScoreID")]
	public EntitySet<Score> Scores
	{
		get
		{
			return this._Scores;
		}
		set
		{
			this._Scores.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.TypeScore = this;
	}
	
	private void detach_Scores(Score entity)
	{
		this.SendPropertyChanging();
		entity.TypeScore = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.UserGroups")]
public partial class UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserGroupID;
	
	private string _UserGroupName;
	
	private string _RoleName;
	
	private EntitySet<Users_UserGroup> _Users_UserGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    partial void OnUserGroupNameChanging(string value);
    partial void OnUserGroupNameChanged();
    partial void OnRoleNameChanging(string value);
    partial void OnRoleNameChanged();
    #endregion
	
	public UserGroup()
	{
		this._Users_UserGroups = new EntitySet<Users_UserGroup>(new Action<Users_UserGroup>(this.attach_Users_UserGroups), new Action<Users_UserGroup>(this.detach_Users_UserGroups));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserGroupID
	{
		get
		{
			return this._UserGroupID;
		}
		set
		{
			if ((this._UserGroupID != value))
			{
				this.OnUserGroupIDChanging(value);
				this.SendPropertyChanging();
				this._UserGroupID = value;
				this.SendPropertyChanged("UserGroupID");
				this.OnUserGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupName", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
	public string UserGroupName
	{
		get
		{
			return this._UserGroupName;
		}
		set
		{
			if ((this._UserGroupName != value))
			{
				this.OnUserGroupNameChanging(value);
				this.SendPropertyChanging();
				this._UserGroupName = value;
				this.SendPropertyChanged("UserGroupName");
				this.OnUserGroupNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(300)")]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this.OnRoleNameChanging(value);
				this.SendPropertyChanging();
				this._RoleName = value;
				this.SendPropertyChanged("RoleName");
				this.OnRoleNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_Users_UserGroup", Storage="_Users_UserGroups", ThisKey="UserGroupID", OtherKey="UserGroupID")]
	public EntitySet<Users_UserGroup> Users_UserGroups
	{
		get
		{
			return this._Users_UserGroups;
		}
		set
		{
			this._Users_UserGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_Users_UserGroups(Users_UserGroup entity)
	{
		this.SendPropertyChanging();
		entity.UserGroup = this;
	}
	
	private void detach_Users_UserGroups(Users_UserGroup entity)
	{
		this.SendPropertyChanging();
		entity.UserGroup = null;
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users_UserGroups")]
public partial class Users_UserGroup : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private int _UserGroupID;
	
	private string _TeacherID;
	
	private int _SchoolYearID;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<UserGroup> _UserGroup;
	
	private EntityRef<Teacher> _Teacher;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserGroupIDChanging(int value);
    partial void OnUserGroupIDChanged();
    partial void OnTeacherIDChanging(string value);
    partial void OnTeacherIDChanged();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    #endregion
	
	public Users_UserGroup()
	{
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._UserGroup = default(EntityRef<UserGroup>);
		this._Teacher = default(EntityRef<Teacher>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int UserGroupID
	{
		get
		{
			return this._UserGroupID;
		}
		set
		{
			if ((this._UserGroupID != value))
			{
				if (this._UserGroup.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnUserGroupIDChanging(value);
				this.SendPropertyChanging();
				this._UserGroupID = value;
				this.SendPropertyChanged("UserGroupID");
				this.OnUserGroupIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				if (this._Teacher.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTeacherIDChanging(value);
				this.SendPropertyChanging();
				this._TeacherID = value;
				this.SendPropertyChanged("TeacherID");
				this.OnTeacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL", IsPrimaryKey=true)]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Users_UserGroup", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.Users_UserGroups.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.Users_UserGroups.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="UserGroup_Users_UserGroup", Storage="_UserGroup", ThisKey="UserGroupID", OtherKey="UserGroupID", IsForeignKey=true)]
	public UserGroup UserGroup
	{
		get
		{
			return this._UserGroup.Entity;
		}
		set
		{
			UserGroup previousValue = this._UserGroup.Entity;
			if (((previousValue != value) 
						|| (this._UserGroup.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._UserGroup.Entity = null;
					previousValue.Users_UserGroups.Remove(this);
				}
				this._UserGroup.Entity = value;
				if ((value != null))
				{
					value.Users_UserGroups.Add(this);
					this._UserGroupID = value.UserGroupID;
				}
				else
				{
					this._UserGroupID = default(int);
				}
				this.SendPropertyChanged("UserGroup");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Users_UserGroup", Storage="_Teacher", ThisKey="TeacherID", OtherKey="TeacherID", IsForeignKey=true)]
	public Teacher Teacher
	{
		get
		{
			return this._Teacher.Entity;
		}
		set
		{
			Teacher previousValue = this._Teacher.Entity;
			if (((previousValue != value) 
						|| (this._Teacher.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Teacher.Entity = null;
					previousValue.Users_UserGroups.Remove(this);
				}
				this._Teacher.Entity = value;
				if ((value != null))
				{
					value.Users_UserGroups.Add(this);
					this._TeacherID = value.TeacherID;
				}
				else
				{
					this._TeacherID = default(string);
				}
				this.SendPropertyChanged("Teacher");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Scores")]
public partial class Score : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _ScoreID;
	
	private int _SchoolYearID;
	
	private int _SemesterID;
	
	private int _ClassID;
	
	private int _SubjectID;
	
	private string _StudentID;
	
	private int _TypeScoreID;
	
	private double _Score1;
	
	private EntityRef<Class> _Class;
	
	private EntityRef<SchoolYear> _SchoolYear;
	
	private EntityRef<Semester> _Semester;
	
	private EntityRef<Student> _Student;
	
	private EntityRef<Subject> _Subject;
	
	private EntityRef<TypeScore> _TypeScore;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnScoreIDChanging(string value);
    partial void OnScoreIDChanged();
    partial void OnSchoolYearIDChanging(int value);
    partial void OnSchoolYearIDChanged();
    partial void OnSemesterIDChanging(int value);
    partial void OnSemesterIDChanged();
    partial void OnClassIDChanging(int value);
    partial void OnClassIDChanged();
    partial void OnSubjectIDChanging(int value);
    partial void OnSubjectIDChanged();
    partial void OnStudentIDChanging(string value);
    partial void OnStudentIDChanged();
    partial void OnTypeScoreIDChanging(int value);
    partial void OnTypeScoreIDChanged();
    partial void OnScore1Changing(double value);
    partial void OnScore1Changed();
    #endregion
	
	public Score()
	{
		this._Class = default(EntityRef<Class>);
		this._SchoolYear = default(EntityRef<SchoolYear>);
		this._Semester = default(EntityRef<Semester>);
		this._Student = default(EntityRef<Student>);
		this._Subject = default(EntityRef<Subject>);
		this._TypeScore = default(EntityRef<TypeScore>);
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ScoreID", DbType="NChar(15) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string ScoreID
	{
		get
		{
			return this._ScoreID;
		}
		set
		{
			if ((this._ScoreID != value))
			{
				this.OnScoreIDChanging(value);
				this.SendPropertyChanging();
				this._ScoreID = value;
				this.SendPropertyChanged("ScoreID");
				this.OnScoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				if (this._SchoolYear.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSchoolYearIDChanging(value);
				this.SendPropertyChanging();
				this._SchoolYearID = value;
				this.SendPropertyChanged("SchoolYearID");
				this.OnSchoolYearIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL")]
	public int SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				if (this._Semester.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSemesterIDChanging(value);
				this.SendPropertyChanging();
				this._SemesterID = value;
				this.SendPropertyChanged("SemesterID");
				this.OnSemesterIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				if (this._Class.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnClassIDChanging(value);
				this.SendPropertyChanging();
				this._ClassID = value;
				this.SendPropertyChanged("ClassID");
				this.OnClassIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
	public int SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				if (this._Subject.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnSubjectIDChanging(value);
				this.SendPropertyChanging();
				this._SubjectID = value;
				this.SendPropertyChanged("SubjectID");
				this.OnSubjectIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				if (this._Student.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnStudentIDChanging(value);
				this.SendPropertyChanging();
				this._StudentID = value;
				this.SendPropertyChanged("StudentID");
				this.OnStudentIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeScoreID", DbType="Int NOT NULL")]
	public int TypeScoreID
	{
		get
		{
			return this._TypeScoreID;
		}
		set
		{
			if ((this._TypeScoreID != value))
			{
				if (this._TypeScore.HasLoadedOrAssignedValue)
				{
					throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
				}
				this.OnTypeScoreIDChanging(value);
				this.SendPropertyChanging();
				this._TypeScoreID = value;
				this.SendPropertyChanged("TypeScoreID");
				this.OnTypeScoreIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Score", Storage="_Score1", DbType="Float NOT NULL")]
	public double Score1
	{
		get
		{
			return this._Score1;
		}
		set
		{
			if ((this._Score1 != value))
			{
				this.OnScore1Changing(value);
				this.SendPropertyChanging();
				this._Score1 = value;
				this.SendPropertyChanged("Score1");
				this.OnScore1Changed();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Class_Score", Storage="_Class", ThisKey="ClassID", OtherKey="ClassID", IsForeignKey=true)]
	public Class Class
	{
		get
		{
			return this._Class.Entity;
		}
		set
		{
			Class previousValue = this._Class.Entity;
			if (((previousValue != value) 
						|| (this._Class.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Class.Entity = null;
					previousValue.Scores.Remove(this);
				}
				this._Class.Entity = value;
				if ((value != null))
				{
					value.Scores.Add(this);
					this._ClassID = value.ClassID;
				}
				else
				{
					this._ClassID = default(int);
				}
				this.SendPropertyChanged("Class");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="SchoolYear_Score", Storage="_SchoolYear", ThisKey="SchoolYearID", OtherKey="SchoolYearID", IsForeignKey=true)]
	public SchoolYear SchoolYear
	{
		get
		{
			return this._SchoolYear.Entity;
		}
		set
		{
			SchoolYear previousValue = this._SchoolYear.Entity;
			if (((previousValue != value) 
						|| (this._SchoolYear.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._SchoolYear.Entity = null;
					previousValue.Scores.Remove(this);
				}
				this._SchoolYear.Entity = value;
				if ((value != null))
				{
					value.Scores.Add(this);
					this._SchoolYearID = value.SchoolYearID;
				}
				else
				{
					this._SchoolYearID = default(int);
				}
				this.SendPropertyChanged("SchoolYear");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Semester_Score", Storage="_Semester", ThisKey="SemesterID", OtherKey="SemesterID", IsForeignKey=true)]
	public Semester Semester
	{
		get
		{
			return this._Semester.Entity;
		}
		set
		{
			Semester previousValue = this._Semester.Entity;
			if (((previousValue != value) 
						|| (this._Semester.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Semester.Entity = null;
					previousValue.Scores.Remove(this);
				}
				this._Semester.Entity = value;
				if ((value != null))
				{
					value.Scores.Add(this);
					this._SemesterID = value.SemesterID;
				}
				else
				{
					this._SemesterID = default(int);
				}
				this.SendPropertyChanged("Semester");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Student_Score", Storage="_Student", ThisKey="StudentID", OtherKey="StudentID", IsForeignKey=true)]
	public Student Student
	{
		get
		{
			return this._Student.Entity;
		}
		set
		{
			Student previousValue = this._Student.Entity;
			if (((previousValue != value) 
						|| (this._Student.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Student.Entity = null;
					previousValue.Scores.Remove(this);
				}
				this._Student.Entity = value;
				if ((value != null))
				{
					value.Scores.Add(this);
					this._StudentID = value.StudentID;
				}
				else
				{
					this._StudentID = default(string);
				}
				this.SendPropertyChanged("Student");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Subject_Score", Storage="_Subject", ThisKey="SubjectID", OtherKey="SubjectID", IsForeignKey=true)]
	public Subject Subject
	{
		get
		{
			return this._Subject.Entity;
		}
		set
		{
			Subject previousValue = this._Subject.Entity;
			if (((previousValue != value) 
						|| (this._Subject.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._Subject.Entity = null;
					previousValue.Scores.Remove(this);
				}
				this._Subject.Entity = value;
				if ((value != null))
				{
					value.Scores.Add(this);
					this._SubjectID = value.SubjectID;
				}
				else
				{
					this._SubjectID = default(int);
				}
				this.SendPropertyChanged("Subject");
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypeScore_Score", Storage="_TypeScore", ThisKey="TypeScoreID", OtherKey="TypeScoreID", IsForeignKey=true)]
	public TypeScore TypeScore
	{
		get
		{
			return this._TypeScore.Entity;
		}
		set
		{
			TypeScore previousValue = this._TypeScore.Entity;
			if (((previousValue != value) 
						|| (this._TypeScore.HasLoadedOrAssignedValue == false)))
			{
				this.SendPropertyChanging();
				if ((previousValue != null))
				{
					this._TypeScore.Entity = null;
					previousValue.Scores.Remove(this);
				}
				this._TypeScore.Entity = value;
				if ((value != null))
				{
					value.Scores.Add(this);
					this._TypeScoreID = value.TypeScoreID;
				}
				else
				{
					this._TypeScoreID = default(int);
				}
				this.SendPropertyChanged("TypeScore");
			}
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
}

[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
public partial class Teacher : INotifyPropertyChanging, INotifyPropertyChanged
{
	
	private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
	
	private string _TeacherID;
	
	private string _TeacherName;
	
	private string _Email;
	
	private string _Phone;
	
	private string _UserName;
	
	private string _PassWord;
	
	private EntitySet<ClassDepartment> _ClassDepartments;
	
	private EntitySet<TeacherSubject> _TeacherSubjects;
	
	private EntitySet<Users_UserGroup> _Users_UserGroups;
	
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTeacherIDChanging(string value);
    partial void OnTeacherIDChanged();
    partial void OnTeacherNameChanging(string value);
    partial void OnTeacherNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnPhoneChanging(string value);
    partial void OnPhoneChanged();
    partial void OnUserNameChanging(string value);
    partial void OnUserNameChanged();
    partial void OnPassWordChanging(string value);
    partial void OnPassWordChanged();
    #endregion
	
	public Teacher()
	{
		this._ClassDepartments = new EntitySet<ClassDepartment>(new Action<ClassDepartment>(this.attach_ClassDepartments), new Action<ClassDepartment>(this.detach_ClassDepartments));
		this._TeacherSubjects = new EntitySet<TeacherSubject>(new Action<TeacherSubject>(this.attach_TeacherSubjects), new Action<TeacherSubject>(this.detach_TeacherSubjects));
		this._Users_UserGroups = new EntitySet<Users_UserGroup>(new Action<Users_UserGroup>(this.attach_Users_UserGroups), new Action<Users_UserGroup>(this.detach_Users_UserGroups));
		OnCreated();
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this.OnTeacherIDChanging(value);
				this.SendPropertyChanging();
				this._TeacherID = value;
				this.SendPropertyChanged("TeacherID");
				this.OnTeacherIDChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this.OnTeacherNameChanging(value);
				this.SendPropertyChanging();
				this._TeacherName = value;
				this.SendPropertyChanged("TeacherName");
				this.OnTeacherNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this.OnEmailChanging(value);
				this.SendPropertyChanging();
				this._Email = value;
				this.SendPropertyChanged("Email");
				this.OnEmailChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(10)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this.OnPhoneChanging(value);
				this.SendPropertyChanging();
				this._Phone = value;
				this.SendPropertyChanged("Phone");
				this.OnPhoneChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(50)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this.OnUserNameChanging(value);
				this.SendPropertyChanging();
				this._UserName = value;
				this.SendPropertyChanged("UserName");
				this.OnUserNameChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NChar(50)")]
	public string PassWord
	{
		get
		{
			return this._PassWord;
		}
		set
		{
			if ((this._PassWord != value))
			{
				this.OnPassWordChanging(value);
				this.SendPropertyChanging();
				this._PassWord = value;
				this.SendPropertyChanged("PassWord");
				this.OnPassWordChanged();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_ClassDepartment", Storage="_ClassDepartments", ThisKey="TeacherID", OtherKey="TeacherID")]
	public EntitySet<ClassDepartment> ClassDepartments
	{
		get
		{
			return this._ClassDepartments;
		}
		set
		{
			this._ClassDepartments.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_TeacherSubject", Storage="_TeacherSubjects", ThisKey="TeacherID", OtherKey="TeacherID")]
	public EntitySet<TeacherSubject> TeacherSubjects
	{
		get
		{
			return this._TeacherSubjects;
		}
		set
		{
			this._TeacherSubjects.Assign(value);
		}
	}
	
	[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teacher_Users_UserGroup", Storage="_Users_UserGroups", ThisKey="TeacherID", OtherKey="TeacherID")]
	public EntitySet<Users_UserGroup> Users_UserGroups
	{
		get
		{
			return this._Users_UserGroups;
		}
		set
		{
			this._Users_UserGroups.Assign(value);
		}
	}
	
	public event PropertyChangingEventHandler PropertyChanging;
	
	public event PropertyChangedEventHandler PropertyChanged;
	
	protected virtual void SendPropertyChanging()
	{
		if ((this.PropertyChanging != null))
		{
			this.PropertyChanging(this, emptyChangingEventArgs);
		}
	}
	
	protected virtual void SendPropertyChanged(String propertyName)
	{
		if ((this.PropertyChanged != null))
		{
			this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
		}
	}
	
	private void attach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.Teacher = this;
	}
	
	private void detach_ClassDepartments(ClassDepartment entity)
	{
		this.SendPropertyChanging();
		entity.Teacher = null;
	}
	
	private void attach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Teacher = this;
	}
	
	private void detach_TeacherSubjects(TeacherSubject entity)
	{
		this.SendPropertyChanging();
		entity.Teacher = null;
	}
	
	private void attach_Users_UserGroups(Users_UserGroup entity)
	{
		this.SendPropertyChanging();
		entity.Teacher = this;
	}
	
	private void detach_Users_UserGroups(Users_UserGroup entity)
	{
		this.SendPropertyChanging();
		entity.Teacher = null;
	}
}

public partial class BangGVBMResult
{
	
	private string _TeacherID;
	
	private string _TeacherName;
	
	private string _UserName;
	
	public BangGVBMResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
}

public partial class TimTheoTenHSCuResult
{
	
	private string _StudentName;
	
	public TimTheoTenHSCuResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(300)")]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this._StudentName = value;
			}
		}
	}
}

public partial class canboResult
{
	
	private string _UserName;
	
	private string _TeacherName;
	
	private string _TeacherID;
	
	public canboResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
}

public partial class cbkhacResult
{
	
	private string _UserName;
	
	private string _TeacherName;
	
	private string _TeacherID;
	
	public cbkhacResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
}

public partial class dbo_funcStudentResult
{
	
	private string _StudentID;
	
	private string _StudentName;
	
	public dbo_funcStudentResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this._StudentID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(300)")]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this._StudentName = value;
			}
		}
	}
}

public partial class DiemTheoMonResult
{
	
	private int _SchoolYearID;
	
	private string _SchoolYearName;
	
	private string _ClassName;
	
	private string _StudentName;
	
	private string _SemesterName;
	
	private string _SubjectName;
	
	private int _ClassID;
	
	private string _StudentID;
	
	private int _SemesterID;
	
	private int _SubjectID;
	
	public DiemTheoMonResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				this._SchoolYearID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this._SchoolYearName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(300)")]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this._StudentName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterName", DbType="NVarChar(50)")]
	public string SemesterName
	{
		get
		{
			return this._SemesterName;
		}
		set
		{
			if ((this._SemesterName != value))
			{
				this._SemesterName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(300)")]
	public string SubjectName
	{
		get
		{
			return this._SubjectName;
		}
		set
		{
			if ((this._SubjectName != value))
			{
				this._SubjectName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this._StudentID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL")]
	public int SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				this._SemesterID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
	public int SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				this._SubjectID = value;
			}
		}
	}
}

public partial class gvlopmonResult
{
	
	private string _UserName;
	
	private string _TeacherName;
	
	private string _TeacherID;
	
	public gvlopmonResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
}

public partial class KTMAPLResult
{
	
	private string _StudentID;
	
	public KTMAPLResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this._StudentID = value;
			}
		}
	}
}

public partial class LoadAdminResult
{
	
	private string _TeacherID;
	
	private string _TeacherName;
	
	private string _Email;
	
	private string _Phone;
	
	private string _UserName;
	
	private string _PassWord;
	
	public LoadAdminResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(50)")]
	public string Email
	{
		get
		{
			return this._Email;
		}
		set
		{
			if ((this._Email != value))
			{
				this._Email = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Phone", DbType="NChar(10)")]
	public string Phone
	{
		get
		{
			return this._Phone;
		}
		set
		{
			if ((this._Phone != value))
			{
				this._Phone = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PassWord", DbType="NChar(100)")]
	public string PassWord
	{
		get
		{
			return this._PassWord;
		}
		set
		{
			if ((this._PassWord != value))
			{
				this._PassWord = value;
			}
		}
	}
}

public partial class LoadGridViewCuResult
{
	
	private string _StudentID;
	
	private string _StudentName;
	
	public LoadGridViewCuResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this._StudentID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(300)")]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this._StudentName = value;
			}
		}
	}
}

public partial class LoadgrvPhanQuyenResult
{
	
	private string _UserName;
	
	private string _TeacherName;
	
	private int _UserGroupID;
	
	private string _RoleName;
	
	private string _SchoolYearName;
	
	public LoadgrvPhanQuyenResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserGroupID", DbType="Int NOT NULL")]
	public int UserGroupID
	{
		get
		{
			return this._UserGroupID;
		}
		set
		{
			if ((this._UserGroupID != value))
			{
				this._UserGroupID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleName", DbType="NVarChar(300)")]
	public string RoleName
	{
		get
		{
			return this._RoleName;
		}
		set
		{
			if ((this._RoleName != value))
			{
				this._RoleName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this._SchoolYearName = value;
			}
		}
	}
}

public partial class LoadGVResult
{
	
	private string _TeacherID;
	
	private string _TeacherName;
	
	public LoadGVResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
}

public partial class LoadGVCuResult
{
	
	private string _TeacherID;
	
	private string _TeacherName;
	
	public LoadGVCuResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
}

public partial class LoadLopResult
{
	
	private int _ClassID;
	
	private string _ClassName;
	
	public LoadLopResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
}

public partial class LopcoHSnhohon50Result
{
	
	private int _ClassID;
	
	private string _ClassName;
	
	public LopcoHSnhohon50Result()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
}

public partial class LopHS1011CuResult
{
	
	private int _ClassID;
	
	private string _ClassName;
	
	public LopHS1011CuResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
}

public partial class LopMoiResult
{
	
	private int _ClassID;
	
	private string _ClassName;
	
	public LopMoiResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
}

public partial class NamCuResult
{
	
	private int _SchoolYearID;
	
	private string _SchoolYearName;
	
	public NamCuResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				this._SchoolYearID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this._SchoolYearName = value;
			}
		}
	}
}

public partial class NamMoiResult
{
	
	private int _SchoolYearID;
	
	private string _SchoolYearName;
	
	public NamMoiResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				this._SchoolYearID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this._SchoolYearName = value;
			}
		}
	}
}

public partial class NhomGVCNResult
{
	
	private string _UserName;
	
	private string _TeacherName;
	
	private string _TeacherID;
	
	public NhomGVCNResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserName", DbType="NChar(100)")]
	public string UserName
	{
		get
		{
			return this._UserName;
		}
		set
		{
			if ((this._UserName != value))
			{
				this._UserName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherName", DbType="NVarChar(50)")]
	public string TeacherName
	{
		get
		{
			return this._TeacherName;
		}
		set
		{
			if ((this._TeacherName != value))
			{
				this._TeacherName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TeacherID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string TeacherID
	{
		get
		{
			return this._TeacherID;
		}
		set
		{
			if ((this._TeacherID != value))
			{
				this._TeacherID = value;
			}
		}
	}
}

public partial class PhanMonResult
{
	
	private int _ClassID;
	
	private string _ClassName;
	
	private string _SchoolYearName;
	
	public PhanMonResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this._SchoolYearName = value;
			}
		}
	}
}

public partial class ScoreResult
{
	
	private int _SchoolYearID;
	
	private string _SchoolYearName;
	
	private string _ClassName;
	
	private string _StudentName;
	
	private string _SemesterName;
	
	private string _SubjectName;
	
	private int _ClassID;
	
	private string _StudentID;
	
	private int _SemesterID;
	
	private int _SubjectID;
	
	public ScoreResult()
	{
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearID", DbType="Int NOT NULL")]
	public int SchoolYearID
	{
		get
		{
			return this._SchoolYearID;
		}
		set
		{
			if ((this._SchoolYearID != value))
			{
				this._SchoolYearID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SchoolYearName", DbType="NChar(10)")]
	public string SchoolYearName
	{
		get
		{
			return this._SchoolYearName;
		}
		set
		{
			if ((this._SchoolYearName != value))
			{
				this._SchoolYearName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassName", DbType="NVarChar(50)")]
	public string ClassName
	{
		get
		{
			return this._ClassName;
		}
		set
		{
			if ((this._ClassName != value))
			{
				this._ClassName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentName", DbType="NVarChar(300)")]
	public string StudentName
	{
		get
		{
			return this._StudentName;
		}
		set
		{
			if ((this._StudentName != value))
			{
				this._StudentName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterName", DbType="NVarChar(50)")]
	public string SemesterName
	{
		get
		{
			return this._SemesterName;
		}
		set
		{
			if ((this._SemesterName != value))
			{
				this._SemesterName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectName", DbType="NVarChar(300)")]
	public string SubjectName
	{
		get
		{
			return this._SubjectName;
		}
		set
		{
			if ((this._SubjectName != value))
			{
				this._SubjectName = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClassID", DbType="Int NOT NULL")]
	public int ClassID
	{
		get
		{
			return this._ClassID;
		}
		set
		{
			if ((this._ClassID != value))
			{
				this._ClassID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StudentID", DbType="NChar(10) NOT NULL", CanBeNull=false)]
	public string StudentID
	{
		get
		{
			return this._StudentID;
		}
		set
		{
			if ((this._StudentID != value))
			{
				this._StudentID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SemesterID", DbType="Int NOT NULL")]
	public int SemesterID
	{
		get
		{
			return this._SemesterID;
		}
		set
		{
			if ((this._SemesterID != value))
			{
				this._SemesterID = value;
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SubjectID", DbType="Int NOT NULL")]
	public int SubjectID
	{
		get
		{
			return this._SubjectID;
		}
		set
		{
			if ((this._SubjectID != value))
			{
				this._SubjectID = value;
			}
		}
	}
}
#pragma warning restore 1591
